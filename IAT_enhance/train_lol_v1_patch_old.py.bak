import torch
import torch.nn as nn
import torchvision
import torch.backends.cudnn as cudnn
import torch.optim
import torch.nn.functional as F

import os
import sys
import argparse
import time
import numpy as np
import cv2
import matplotlib.pyplot as plt
from tqdm import tqdm
from torchvision.models import vgg16

from data_loaders.lol_v1_new import lowlight_loader_new
from model.IAT_main import IAT

from IQA_pytorch import SSIM
from utils import PSNR, adjust_learning_rate, validation, LossNetwork, visualization

from sklearn.metrics import mean_squared_error


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--gpu_id', type=str, default=0)
    parser.add_argument('--img_path', type=str, default='./our485/low/')
    parser.add_argument('--img_val_path', type=str, default='./eval15/low/')

    parser.add_argument('--batch_size', type=int, default=4)
    parser.add_argument('--lr', type=float, default=2e-4)
    parser.add_argument('--weight_decay', type=float, default=0.0004)
    parser.add_argument('--pretrain_dir', type=str, default=None)

    parser.add_argument('--num_epochs', type=int, default=10)
    parser.add_argument('--display_iter', type=int, default=10)
    parser.add_argument('--snapshots_folder', type=str, default="workdirs/snapshots_folder_lol_v1_patch")

    config = parser.parse_args()

    os.environ['CUDA_VISIBLE_DEVICES'] = str(config.gpu_id)

    if not os.path.exists(config.snapshots_folder):
        os.makedirs(config.snapshots_folder)

    # Model Setting
    model = IAT().cuda()

    if config.pretrain_dir is not None:
        model.load_state_dict(torch.load(config.pretrain_dir))

    # Data Setting
    train_dataset = lowlight_loader_new(images_path=config.img_path)
    train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=config.batch_size, shuffle=True, num_workers=8,
                                               pin_memory=True)
    val_dataset = lowlight_loader_new(images_path=config.img_val_path, mode='test')
    val_loader = torch.utils.data.DataLoader(val_dataset, batch_size=1, shuffle=False, num_workers=8, pin_memory=True)

    #Madgrad?
    optimizer = torch.optim.Adam(model.parameters(), lr=config.lr, betas=(0.9, 0.999), eps=1e-8, weight_decay=config.weight_decay)
    scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=config.num_epochs)

    device = next(model.parameters()).device
    print('the device is:', device)

    # L1_loss = CharbonnierLoss()
    #L1Loss is MAE. Wtf.
    #L1_loss = nn.L1Loss()
    #loss_function = nn.MSELoss()
    loss_function = nn.L1Loss()
    L1_smooth_loss = F.smooth_l1_loss

    ssim = SSIM()
    psnr = PSNR()
    ssim_high = 0
    psnr_high = 0

    model.train()
    print('######## Start IAT Training #########')
    for epoch in range(1, config.num_epochs + 1):
        # adjust_learning_rate(optimizer, epoch)
        print('the epoch is:', epoch)
        train_loss = []
        for iteration, imgs in enumerate(train_loader):
            low_img, high_img = imgs[0].cuda(), imgs[1].cuda()

            optimizer.zero_grad()
            model.train()
            mul, add, enhance_img = model(low_img)
            
            x1 = enhance_img[0].cpu().detach().numpy()
            x2 = high_img[0].cpu().detach().numpy()
            
            x1 = np.transpose(x1, (1, 2, 0))
            x2 = np.transpose(x2, (1, 2, 0))
            
            output_img = np.zeros((x1.shape[0], 1 + x1.shape[1] + 1 + x2.shape[1] + 1, 3))
            
            output_img[:, 1: x1.shape[1] + 1, :] = (x1 * 255).astype("uint8")
            output_img[:, 1 + x1.shape[1] + 2:, :] = (x2 * 255).astype("uint8")
            cv2.imwrite("model_training/Sample_%d.png" % iteration, output_img)
            
            loss = loss_function(enhance_img, high_img)
            #loss = L1_smooth_loss(enhance_img, high_img)+0.04*loss_network(enhance_img, high_img)
            loss.backward()
            
            optimizer.step()
            scheduler.step()

            print("Loss at batch", iteration + 1, ":", loss.item(), end='\r')

            train_loss.append(loss.item())
        
        print('\n')
        print("Epoch average loss:", np.average(np.array(train_loss)))
        print()
        # Evaluation Model
        model.eval()
        PSNR_mean, SSIM_mean = validation(model, val_loader)

        with open(config.snapshots_folder + '/log.txt', 'a+') as f:
            f.write('epoch' + str(epoch) + ':' + 'the SSIM is' + str(SSIM_mean) + 'the PSNR is' + str(PSNR_mean) + '\n')
        
        if SSIM_mean > ssim_high:
            ssim_high = SSIM_mean
            print('the highest SSIM value is:', str(ssim_high))
            torch.save(model.state_dict(), os.path.join(config.snapshots_folder, "best_Epoch" + '.pth'))

        f.close()
